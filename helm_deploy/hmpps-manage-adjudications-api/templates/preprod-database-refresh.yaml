{{- if eq .Values.environment  "dev" -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-refresh-script
data:
  entrypoint.sh: |-
    #!/bin/bash
    set -e
    # Refreshes only happen every other week, crontab doesnt really support this
    week=$(date +%U)
    if [ $(($week % 2)) == 0 ]; then
      echo "Not running refresh this week, refreshes only happens on odd week numbers, check back next week."
      exit 0
    fi

    echo "${DB_HOST}:5432:${DB_NAME}:${DB_USER}:${DB_PASS}" > ~/.pgpass
    echo "${DB_HOST_PREPROD}:5432:${DB_NAME_PREPROD}:${DB_USER_PREPROD}:${DB_PASS_PREPROD}" >> ~/.pgpass
    chmod 0600 ~/.pgpass
    set -x
    pg_dump -h $DB_HOST -U $DB_USER -Fc --no-privileges -v --file=/tmp/db.dump $DB_NAME
    pg_restore -h $DB_HOST_PREPROD -U $DB_USER_PREPROD --clean --no-owner -v -d $DB_NAME_PREPROD /tmp/db.dump
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: db-refresh-job
spec:
  schedule: "30 10 * * 0"
  concurrencyPolicy: "Forbid"
  successfulJobsHistoryLimit: 5
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      backoffLimit: 0
      activeDeadlineSeconds: 1200
      template:
        spec:
          securityContext:
            runAsUser: 999
          containers:
            - name: dbrefresh
              image: "postgres:11.4"
              command:
                - /bin/entrypoint.sh
              volumeMounts:
                - name: db-refresh-script
                  mountPath: /bin/entrypoint.sh
                  readOnly: true
                  subPath: entrypoint.sh
              env:
                - name: DB_NAME
                  valueFrom:
                    secretKeyRef:
                      name: dps-rds-instance-output
                      key: database_name
                - name: DB_USER
                  valueFrom:
                    secretKeyRef:
                      name: dps-rds-instance-output
                      key: database_username
                - name: DB_PASS
                  valueFrom:
                    secretKeyRef:
                      name: dps-rds-instance-output
                      key: database_password
                - name: DB_HOST
                  valueFrom:
                    secretKeyRef:
                      name: dps-rds-instance-output
                      key: rds_instance_address
                - name: DB_NAME_PREPROD
                  valueFrom:
                    secretKeyRef:
                      name: dps-rds-instance-output-preprod
                      key: database_name
                - name: DB_USER_PREPROD
                  valueFrom:
                    secretKeyRef:
                      name: dps-rds-instance-output-preprod
                      key: database_username
                - name: DB_PASS_PREPROD
                  valueFrom:
                    secretKeyRef:
                      name: dps-rds-instance-output-preprod
                      key: database_password
                - name: DB_HOST_PREPROD
                  valueFrom:
                    secretKeyRef:
                      name: dps-rds-instance-output-preprod
                      key: rds_instance_address
          restartPolicy: "Never"
          volumes:
            - name: db-refresh-script
              configMap:
                name: db-refresh-script
                defaultMode: 0755
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  labels:
    app: dps-db-refresh-job
    prometheus: cloud-platform
  name: dps-prometheus-rules-db-refresh
spec:
  groups:
  - name: kubernetes-apps
    rules:
    - alert: DB-refresh-job-failed
      annotations:
        message: Database refresh {{`{{ $labels.namespace }}/{{ $labels.job_name }}`}} failed to complete.
        runbook_url: https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#alert-name-kubejobfailed
      expr: kube_job_status_failed{namespace="hmpps-manage-adjudications-api-prod",job_name=~"db-refresh-job.*"} > 0
      for: 1m
      labels:
        severity: digital-prison-service
{{- end }}
